#include "clODE_struct_defs.cl" //for SolverParams struct definition
#include "realtype.cl"

//Wrapper to handle step-size adaptation.  note: wi should be zeros
inline int stepper(realtype *ti, realtype xi[], realtype k1[], const realtype pars[], 
__constant struct SolverParams *sp, realtype *dt, __constant realtype *tspan, 
realtype aux[], realtype wi[], const int step, rngData *rd)
{
    do_step(ti, xi, k1, pars, *dt, aux, wi);

    // naive time update - this is the one consistent with what's in each stepper...
    *ti += *dt;

    // // update time using Kahan summation
    // realtype y = *dt - *terr;
    // realtype tmp = *ti + y;
    // *terr = (tmp - *ti) - *dt;
    // *ti = tmp;

    //update the solution and dt - fma(step, *dt, tspan[0]) doesn't seem to change anything (compiler does it?)
    // *ti = tspan[0] + *dt * step;
    
#ifdef STOCHASTIC_STEPPER //get the new random variables for the next time step
    for (int j = 0; j < N_WIENER; ++j)
        wi[j] = randn(rd) / sqrt(*dt);
#endif
    getRHS(*ti, xi, pars, k1, aux, wi); //compute k1 at new (purified) time. only really matters for non-autonomous case

    return 0;
}